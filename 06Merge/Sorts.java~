// Nicole Cheng
// apcs pd7
// Big-O
// 2016-01-04

public class Sorts{
    public static void printArray(int[]data){
	//print the array like:  [ 1, 2, 3, 4]
	String ret = "[ ";
	for (int i = 0; i < data.length; i++){
	    ret += data[i];
	    if (i != data.length-1){
		ret += ", ";
	    }
	}
	System.out.println(ret + "]");
    }
    
    public static void insertionSort(int[]data){
	//your code here to make data re-order its elements
	//from least to greatest just like we did in class
	//same algorithm as the way you created your OrderedSuperArray

	if (data.length > 1){
	
	    int index = 1; // where are we up to?
	    int insert = 0;
	    int hold = data[index];
	
	    while (index < data.length){
		if (data[index] >= data[index-1]){
		    index++;
		}else{
		    hold = data[index];
		    insert = index-1;
		    while (hold < data[insert] && insert > 0 && hold < data[insert-1]){
			insert--;
		    }
	    
		    for (int i = index; i > insert; i--){
			data[i] = data[i-1];
		    }
		    data[insert] = hold;
		    index++;	
		    printArray(data);	
		}
	    }
	}
    }


    public static void selectionSort(int[]data){
	if (data.length > 1){
            int index = 0;
	    while (index < data.length){
		int min = data[index];
		int minInd = index;
		for (int i = index; i < data.length; i++){
		    if (data[i] < min){
			min = data[i];
			minInd = i;
		    }
		}
		data[minInd] = data[index];
		data[index] = min;
		index++;
		printArray(data);	
	    }
	}
    }

    public static void bubbleSort(int[]data){
	int sorted = data.length; // from which index is it sorted?
	int hold = 0;
	while (sorted > 0){
	    for (int i = 0; i < sorted-1; i++){
		if (data[i] > data[i+1]){
		    hold = data[i+1];
		    data[i+1] = data[i];
		    data[i] = hold;
		}
	    }
	    sorted --;
	    printArray(data);
	}
    }

    public static int[] merge(int[]aryA, int[]aryB){
	int len = aryA.length+aryB.length;
	int[]list = new int[len];
	int a = 0;
	int b = 0;
        while(a+b<len-2){
	    if(a==aryA.length){
		for(int r = b; r < aryB.length; r++){
		    list[a+b] = aryB[b];
		    b++;
		}
	    }else if(b==aryB.length){
		for(int r = a; r < aryA.length; r++){
		    list[a+b] = aryA[a];
		    a++;
		    }
	    }else if(lessThan(aryA[a],aryB[b])){
		list[a+b]=aryA[a];
		a++;
	    }else{
		list[a+b]=aryB[b];
		b++;
	    }		
	}
	return list;
    }

    public static boolean lessThan(int a, int b){
	return (a < b);
    }

    public static int[] mergeSort(int[]data){
	int[]ret = new int[data.length];
	int[]hold = new int[data.length];
	int len = 1;
	int[] uno,dos;
	while(len<data.length/2+data.length%2){
	    for(int i = 0; i < data.length; i++){
		int[]one = new int[len];
		int[]two = new int[len];
		one = makeAr(data,i,len+i);
		two = makeAr(data,data.length-i,data.length-i-len);
		len*=2;
		if(i==data.length-1){
		    uno=one;
		    dos=two;
		}
	    }
	    merge(uno,dos);
	}
	return ret;
    }

    public static int[] makeAr(int[]ary,int start, int end){
	int[]a=new int[end-start];
	while (start<end){
	    a[start]=ary[start];
	    start++;
	}
	return a;
    }

    /*
      Preconditions:
      data.length >= 2
      the elements of data are in ascending order (sorted)
      startA <= endA < startB <= endB
      startA >= 0
      endB < data.length
    */
    
    //    void merge(int[]data, int startA, endA, startB, endB)

    public void printList(int[]j){
	System.out.print("{");
	for(int i = 0; i < j.length-1; i++){
	    System.out.print(j[i]+",");
	}
	System.out.print(j[j.length-1]+"}");
    }
    /*
    public void printList(){
	System.out.print("{");
	for(int i = 0; i < data.length-1; i++){
	    System.out.print(data[i]+",");
	}
	System.out.print(data[data.length-1]+"}");
	}*/
    
    public static void main(String[]args){

	int[]a = {1,7,10,14};
	int[]b = {-2,3,4,21,32,47};
	Sorts m = new Sorts(a);
	m.printList(a);
	System.out.println();
	m.printList(b);
	System.out.println();
	m.printList(m.merge(a,b));
	
    }
    


    public static int[] fillRandom(int[] ary){
	for (int i = 0; i < ary.length; i++){
	    ary[i] = (int)(Math.random() * 10000 / (Math.random() * 100));
	}
        return ary;
    }

    public static void swap(int[]a1, int i1, int i2){
	int hold = a1[i2];
	a1[i2] = a1[i1];
	a1[i1] = hold;
    }
/*
    public static void main(String[]args){
	System.out.println("Selection Sort:");
	int[] arrayName = { 8, 6, 7, 5, 3, 0, 9};
	Sorts.printArray( arrayName);
	Sorts.selectionSort( arrayName);
	Sorts.printArray( arrayName);
	System.out.println();
	System.out.println("Insertion Sort:");
	int[] arrayN = { 8, 6, 7, 5, 3, 0, 9};
	Sorts.printArray( arrayN);
	Sorts.insertionSort( arrayN);
	Sorts.printArray( arrayN);
	System.out.println();
	System.out.println("Bubble Sort:");
	int[] arryN = { 8, 6, 7, 5, 3, 0, 9};
	Sorts.printArray( arryN);
	Sorts.bubbleSort( arryN);
	Sorts.printArray( arryN);
*/	/*	
		int[] e = {};
		Sorts.printArray( e);
		Sorts.selection( e);
		Sorts.printArray( e);
	
		int[] ae = { 8, 8, 8, 8, 8};
		Sorts.printArray( ae);
		Sorts.selection( ae);
		Sorts.printArray( ae);

		int[] a = { 9, -9, 6, 3, 17};
		Sorts.printArray( a);
		Sorts.selection( a);
		Sorts.printArray( a);

		int[] ar = { 0};
		Sorts.printArray( ar);
		Sorts.selection( ar);
		Sorts.printArray( ar);

		int[] array = { 15, 14, 13, 12, 11, 10};
		Sorts.printArray( array);
		Sorts.selection( array);
		Sorts.printArray( array);

    }
*/
}
